from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext
import os
import psycopg2
import logging

# Configuration du logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN", "7929001260:AAG_EZTbt3C11GCZauaLqkuP99YKkxB1NJg")
ADMIN_ID = 7686799533
DATABASE_URL = os.getenv("DATABASE_URL")

def init_db():
    try:
        logger.info("Tentative d'initialisation de la base de donn√©es...")
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        
        # Cr√©ation de la table stats
        cur.execute('''
            CREATE TABLE IF NOT EXISTS stats (
                total_starts INTEGER DEFAULT 0
            )
        ''')
        
        # V√©rifier si la table est vide et l'initialiser si n√©cessaire
        cur.execute('SELECT COUNT(*) FROM stats')
        if cur.fetchone()[0] == 0:
            cur.execute('INSERT INTO stats (total_starts) VALUES (0)')
        
        conn.commit()
        cur.close()
        conn.close()
        logger.info("Base de donn√©es initialis√©e avec succ√®s")
        return True
    except Exception as e:
        logger.error(f"Erreur d'initialisation BD: {str(e)}")
        return False

WELCOME_MESSAGE = """üöÄ Welcome to EngageVault!

‚≠ê Congratulations Early Adopter! ‚≠ê

You've just discovered the next big thing in social media growth - and you're among the first to join! üéØ

üíé Being an early member means:
‚Ä¢ EXCLUSIVE ACCESS to premium features
‚Ä¢ PRIORITY STATUS for upcoming features
‚Ä¢ FREE GIFTS for early supporters

üìù How you'll benefit:
‚Ä¢ Boost your social media presence
‚Ä¢ Earn real rewards while growing
‚Ä¢ Connect with power users
‚Ä¢ Get ahead of the competition

‚ö° Don't miss out on these early-bird benefits!
Join now before regular rates apply! üéÅ

Ready to multiply your social growth? Tap below! üëá"""

def start(update: Update, context: CallbackContext):
    logger.info("Commande /start re√ßue")
    try:
        keyboard = [
            [InlineKeyboardButton("‚≠ê Join our Community", url="https://t.me/engagevaultcommunity")],
            [InlineKeyboardButton("üöÄ Launch App", url="https://google.com")]
        ]
        update.message.reply_text(WELCOME_MESSAGE, reply_markup=InlineKeyboardMarkup(keyboard))
        logger.info("Message de bienvenue envoy√©")
        
        # Essayer d'enregistrer dans la BD seulement apr√®s avoir envoy√© le message
        try:
            conn = psycopg2.connect(DATABASE_URL)
            cur = conn.cursor()
            cur.execute('UPDATE stats SET total_starts = total_starts + 1')
            conn.commit()
            cur.close()
            conn.close()
            logger.info("Statistiques mises √† jour")
        except Exception as db_error:
            logger.error(f"Erreur BD dans start: {str(db_error)}")
            
    except Exception as e:
        logger.error(f"Erreur g√©n√©rale dans start: {str(e)}")

def get_stats(update: Update, context: CallbackContext):
    logger.info(f"Commande /stats re√ßue de l'utilisateur {update.effective_user.id}")
    
    if update.effective_user.id != ADMIN_ID:
        logger.warning("Tentative d'acc√®s non autoris√©e aux stats")
        update.message.reply_text("‚õî You don't have permission to use this command.")
        return
        
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute('SELECT total_starts FROM stats')
        total = cur.fetchone()[0]
        cur.close()
        conn.close()
        logger.info(f"Stats r√©cup√©r√©es: {total} starts")
        
        update.message.reply_text(f"üìä Total /start commands: {total}")
    except Exception as e:
        logger.error(f"Erreur dans get_stats: {str(e)}")
        update.message.reply_text("‚ùå Error getting statistics")

if __name__ == '__main__':
    logger.info("D√©marrage du bot...")
    if init_db():  # Initialiser la BD au d√©marrage
        try:
            updater = Updater(TOKEN)
            updater.dispatcher.add_handler(CommandHandler("start", start))
            updater.dispatcher.add_handler(CommandHandler("stats", get_stats))
            logger.info("Handlers ajout√©s")
            
            logger.info("D√©marrage du polling...")
            updater.start_polling()
            logger.info("Bot d√©marr√© avec succ√®s")
            updater.idle()
        except Exception as e:
            logger.error(f"Erreur critique au d√©marrage: {str(e)}")
    else:
        logger.error("√âchec de l'initialisation de la base de donn√©es")